Git 
Ubuntu linux install
sudo apt-get install git

source code download
 ./config 
 make 
 sudo make install
在sourcecode 目录init git仓库多出来.git文件
配置git
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

配置git， Git是分布式版本控制系统，每个机器必须自报家门：你的名字和Email地址。
---………………--
git add
git commit -m "" 只会提交添加到缓存区的文件
git commit -a -m " " 能提交修改过，但是没有添加到缓存区的文件
git log 能查看提交历史，后面加上 --pretty =oneline 能使 内容单行显示
git status 能让我们时刻掌握仓库当前状态 git diff 查看

------git 在版本之间穿梭---- 
HEAD是一个管理指针
git reset --hard HEAD^
git reset --head number
git reflog

git checkout -- file 撤销工作区的修改
git reset HEAD file 撤销暂存区的提交，回到工作区
reset命令可以回退版本，也可以吧暂存区的修改回退到工作区

rm
git rm
git commit -m "remove file'

git push / git clone
git checkout -b <name> （-b创建并切换到分支
git branch 查看在哪个分支
git checkout <name>切换分支
get merge <name> 合并某分支到当前分支
git branch -d <name>

git merge --no-ff -m "merge with no-ff"
加上 no-ff 参数可以代替普通合并
git log --graph --pretty=oneline --abbrev-commit
(这一句很强大，具体怎样试验一下就知道了)

git stash (修复bug时，当前分支保存现场)
git stash apply / git stash drop /git stash list
git stash pop

修复bug时，当前branch需要stash现场，有bug的分支上重新checkout分支，修复bug之后，merge到master再恢复现场

git branch -D <name> 强制删除

git remote -v 查看远程库
git push origin branch-name 
本地创建和远程分支对应的分支
git checkkout -b branch-name origin/branch-name
建立本地分支和远程分支的关联
git branch --set-upstream branch-name origin/branch-name
git pull 从远程抓取分支

git tag v1.0
git tag v0.9 <commit-id>
git show <tagname> 查看标签信息
git tag -a v0.1 -m "string" cmmit-id
git tag 查看所有的标签

git push origin <tagname> 可以推送一个本地标签
git push origin --tags 推送全部未推送的本地标签
git  tag -d <tagnam>
git push origin :refs/tags/<tagname>

$ git config --global color.ui true
$ git config --global alias.st status  (此命令告诉st 代替status)
此外，co代表checkout，ci表示commit，br表示branch
 -- global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
$ git config --global alias.unstage 'reset HEAD'
因此 git reset HEAD file就可以携程 git unstage file了..
配置一个git last让其显示最后一次提交信息：
git config --global alias.last ‘log -1’
有人丧心病狂地吧lg配置成了：
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	仓库的配置文件放在.git/config文件中
	当前用户的Git配置文件放在主目录下的隐藏文件.gitconfig中，命令vim ~/.gitconfig查看

配置Git服务器
	搭建Git服务器需要准备一台运行Linux的机器，如Ubuntu
	1.sudo apt-get install git (安装)
	2.sudo adduser git （创建git用户）
	3.创建证书登陆（id_rsa.pub文件），把公钥导入到/home/git/.ssh/authorized_keys文件里
	4.sudo git init --bar sample.git (初始化Git仓库 ,没有工作区，服务器上的Git仓库纯粹是为了共享，不让用户登上去改工作区，把owner改为git)
	5.sudo chown -R git:git sample.git
	6.禁用shell登录：
	 出于安全考虑，第二步创建的git用户不允许登陆shell，可以通过编辑/etc/passwd文件完成，找到类似下面一行git:x:1001:1001:,,,:/home/git:/bin/bash
修改为： git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 这样git用户可以正常通过ssh使用git，但是无法登陆shell，因为我们为git用户指定的git-shell 每次一登录就自动退出。
    7.clone远程仓库
	现在可以通过git clone命令克隆远程仓库了，在格子电脑上运行：
	git clone XXX
此外管理公钥，管理权限等。如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys 文件是可行的。

